Module design

1. Main 
This module includes 'main.c' file and constructs the main workflow of the whole project. Initially, it checks that inputs is valid and the map file is readable. Then it calls "Read map", "Route plan", "Error exit", "Visualize results" modules to process data, plan best routes, demonstrate the selected route in map. It provides the 3 choices of route finding to meet different demands. 

2. Read map
This module includes 'readMap.c', 'readMap.h', 'adjList.h' and can readï¼Œextract and reform map data from '.map' file. The functions 'getNodeNum' and 'getLinkNum' can get numbers of nodes and links and 'extractData' can gain attributes of nodes and links in map file. Then, the data extracted would be reformed in the data structure defined in 'adjList.h'. The data structure of output would be adjacent list to deal with sparse relations between nodes and is expected to perform the algorithm of route planning more effectively than matrix. 

3. Edit data
This module may include 'editData.c', 'editData.h'. This module can support to add, delete, modify the nodes, links or their attributes stored in the struct. It helps structs to meet requirements of different tasks and easily fix some potential minor problems in map data.   

4. Route plan
This module may include 'routePlan.c', 'routePlan.h' and perform the algorithm of finding 3 kinds of best routes. The function 'init' would define some constants and malloc the structs used in algorithm. The function 'dijk' would use the Dijkstra's algorithm to find the path with shortest distance in task 1. And functions derived from 'dijk' would be implemented to find path with shortest time in task 2 and find the best path with travelling POI in task 3. Also, this module would gain other useful features of routes.

5. Error exit
This module may include 'errorExit.c', 'errorExit.h' and is aimed at dealing with different types of error. It can handle different exits and print information of errors. This module is reusable in the whole project for debugging and would enhance the robustness of the project.

6. Visualizing results
This module may include 'visualize.c', 'visualize.h'. This module uses SDL libarary to render data including selected route, calculated length and other features. Initially, it   would draw the nodes, and 2D map with x-y axis. Then it can render route calculated by 'route plan' module in a 2D map to show the solution.  
